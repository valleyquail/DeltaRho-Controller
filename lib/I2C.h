//
// Created by nikesh on 5/29/23.
//

#ifndef DELTARHO_CONTROLLER_I2C_H
#define DELTARHO_CONTROLLER_I2C_H

#include "hardware/i2c.h"
#include "pico/stdio.h"
#include "pico/stdlib.h"

// Values that might want to be changed
//_____________________________________________________________________________
//  The signal frequency
#define UPDATE_FREQ (400 * 1000) // 400kbits/sec send rate
#define MIN_OUTPUT_FREQ 50       // PCA will output at this as the minimum (Hz)

// SDA and SCL pins on the Pico_W
#define SDA 20
#define SCL 21

// Datasheet for the PCA9685 at:
// https://www.nxp.com/docs/en/data-sheet/PCA9685.pdf
// Datasheet for the TB6612FNG at:
// https://www.sparkfun.com/datasheets/Robotics/TB6612FNG.pdf
//_________________________________________________________________________
// Set up the constants for the PCA9685

// User-defined via setting the jumpers on the board itself
#define PCA9685_ADDRESS 0x40

// Registers/etc:
uint8_t const MODE1 = 0x00;

uint8_t const PRESCALE_REGISTER = 0xFE;
#define PCA_CLOCK_FREQ 25000000.0 // 25MHz clock signal
#define PCA_PWM_RESOLUTION 4095   // 12 bit PWM register

// Used for setting the PWM signal generated by the onboard clock
uint8_t const LED0_ON_L = 0x06;
uint8_t const LED0_ON_H = 0x07;
uint8_t const LED0_OFF_L = 0x08;
uint8_t const LED0_OFF_H = 0x09;
#define PCA_LOW 0 // low signal is a pwm signal of 0
#define PCA_HIGH                                                               \
  PCA_PWM_RESOLUTION // high signal is a 100% duty cycle pwm pulse

// Bits:
#define RESTART 0x80;
#define SLEEP 0x10;
#define ALLCALL 0x01;
#define INVRT 0x10;
#define OUTDRV 0x04;

//_________________________________________________________________________
// Set up the constants for the TB6612FNG

//_________________________________________________________________________

void __init__i2c__(void);

void __init__PCA(void);
// void __reset__();
int reg_read(i2c_inst_t *i2c, const uint addr, const uint8_t reg, uint8_t *buf,
             const uint8_t nbytes);

int reg_write(i2c_inst_t *i2c, const uint addr, const uint8_t reg, uint8_t *buf,
              const uint8_t nbytes);

#endif // DELTARHO_CONTROLLER_I2C_H
