//
// Created by nikesh on 6/8/23.
//

#ifndef DELTARHO_CONTROLLER_PCA9685_H
#define DELTARHO_CONTROLLER_PCA9685_H
#include "I2C_Control.h"
#include "pico/stdio.h"
#include "pico/stdlib.h"
#include <math.h>

// Datasheet for the PCA9685 at:
// https://www.nxp.com/docs/en/data-sheet/PCA9685.pdf

// Set up the constants for the PCA9685

// Registers/etc:
uint8_t const MODE1 = 0x00;

uint8_t const PRESCALE_REGISTER = 0xFE;
#define PCA_CLOCK_FREQ 25000000.0 // 25MHz clock signal
#define PCA_PWM_RESOLUTION 4095   // 12 bit PWM register

// Used for setting the PWM signal generated by the onboard clock
uint8_t const LED0_ON_L = 0x06;
uint8_t const LED0_ON_H = 0x07;
uint8_t const LED0_OFF_L = 0x08;
uint8_t const LED0_OFF_H = 0x09;
constexpr int PCA_LOW = 0; // low signal is a pwm signal of 0
constexpr int PCA_HIGH =
    PCA_PWM_RESOLUTION; // high signal is a 100% duty cycle pwm pulse

// Bits:
#define RESTART 0x80;
#define SLEEP 0x10;
#define ALLCALL 0x01;
#define INVRT 0x10;
#define OUTDRV 0x04;

/**
 * Sets the pwm signal for the motor
 * @param channel
 * @param effort
 */
static inline void setPWM(int channel, int effort) {
  uint8_t offset = channel * 4;
  uint8_t offLow = effort & 0xFF; // First 8 bits of the 12 bit value
  uint8_t offHigh = effort >> 8;  // Last 4 bits of the 12 bits
  reg_write(i2c_default, PCA9685_ADDRESS, LED0_ON_L + offset, 0, 1);
  reg_write(i2c_default, PCA9685_ADDRESS, LED0_ON_H + offset, 0, 1);
  reg_write(i2c_default, PCA9685_ADDRESS, LED0_OFF_L + offset, &offLow, 1);
  reg_write(i2c_default, PCA9685_ADDRESS, LED0_OFF_H + offset, &offHigh, 1);
  //  printf("OffLow = %i and OffHigh = %i\n", offLow, offHigh);
}

/**
 * Inline function that will set the level of the pins responsible for
 * determining the direction to be either high or low depending on the input. A
 * true value for level indicates high and a low value indicates low
 * @param channel the channel the input line is connected to
 * @param level a boolean that sets the line high or low. True = high and False
 * = low
 */
static inline void setLevel(int channel, bool level) {
  if (level)
    setPWM(channel, PCA_HIGH);
  else
    setPWM(channel, PCA_LOW);
}

/**
 * sets the base output frequency for the PCA chip. The default value is set to
 * be 200hz, but it is easy to change
 */
inline void __init__PCA__() {
  reg_write(i2c_default, PCA9685_ADDRESS, MODE1, 0x00, 1);
  sleep_us(500);
  uint8_t oldState;

  reg_read(i2c_default, PCA9685_ADDRESS, MODE1, &oldState, 1);

  uint8_t newState = (oldState & 0x7F) | 0x10; // sleep state
  uint8_t buf[] = {MODE1, newState};
  // put to sleep
  reg_write(i2c_default, PCA9685_ADDRESS, MODE1, &newState, 1);
  // Set the prescale values
  uint8_t prescaleVal =
      roundf(PCA_CLOCK_FREQ / ((PCA_PWM_RESOLUTION + 1) * MIN_OUTPUT_FREQ)) - 1;
  // updates the prescale value
  reg_write(i2c_default, PCA9685_ADDRESS, PRESCALE_REGISTER, &prescaleVal, 1);

  reg_write(i2c_default, PCA9685_ADDRESS, MODE1, &oldState, 1);
  sleep_us(500); // stops sleep and allows the oscillator to stabilize
  buf[1] = oldState | 0x80; // sets the reset register to be 1
  reg_write(i2c_default, PCA9685_ADDRESS, MODE1, &oldState, 1);
  printf("Should have updated the PCA9685");
}

#endif // DELTARHO_CONTROLLER_PCA9685_H
